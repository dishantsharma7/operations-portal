// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Schema

model admin_user {
  id            String      @id @default(uuid())
  firstName     String
  lastName      String
  emailAddress  String   @unique
  countryCode   String
  phoneNumber   String   @unique
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  country       String
  zipcode       Int
  gender        String
  dateOfBirth   DateTime
  username      String   @unique
  password      String
  userImage     String?
  userType      String   @default("admin")
  adminRoleID   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  enabled       Boolean  @default(true)
  createdBy     String
  updatedBy     String

  // Relations
  // adminRole   
  jobs          job_details[]
  adminRole     admin_roles? @relation(fields: [adminRoleID], references: [id]) 


}

model client_user {
  id            String      @id @default(uuid())
  firstName     String
  lastName      String   
  emailAddress  String   @unique
  countryCode   String
  phoneNumber   String   @unique
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  country       String
  zipcode       Int
  gender        String
  dateOfBirth   DateTime
  username      String   @unique
  password      String
  userImage     String?
  userType      String   @default("client")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  enabled       Boolean  @default(true)
  createdBy     String
  updatedBy     String

  //Relations
  jobs          job_details[]

}

model writer_company_user {
  id            String      @id @default(uuid())
  companyName   String
  firstName     String
  lastName      String
  emailAddress  String   @unique
  countryCode   String
  phoneNumber   String   @unique
  addressLine1  String
  addressLine2  String?
  specializationID String?
  Specialization specialization? @relation(fields: [specializationID], references: [id])
  city          String
  state         String
  country       String
  zipcode       Int
  username      String   @unique
  password      String
  userType      String   @default("writer_company")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  enabled       Boolean  @default(true)
  createdBy     String
  updatedBy     String

//Relations
  writers       writer_user[] 
}

model writer_user {
  id            String      @id @default(uuid())
  writerCompanyID String    
  firstName     String
  lastName      String
  emailAddress  String   @unique
  countryCode   String
  phoneNumber   String   @unique
  addressLine1  String
  addressLine2  String?
  departmentID  String?
  department    department? @relation(fields: [departmentID], references: [id])
  city          String
  state         String
  country       String
  zipcode       Int
  gender        String
  dateOfBirth   DateTime
  username      String   @unique
  password      String
  userImage     String?
  userType      String   @default("writer")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  enabled       Boolean  @default(true)
  createdBy     String
  updatedBy     String

  // Relations
 writerCompany   writer_company_user @relation(fields: [writerCompanyID], references: [id])
 jobs            job_details[]       
 quotations      quotation_details[]
}

model admin_roles {
  id                String              @id @default(uuid())
  roleName          String              @unique
  slug              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  enabled           Boolean             @default(true)
  admin_permissions admin_permissions[] @relation("admin_permissionsToadmin_roles")
  admins            admin_user[]     
}

model admin_permissions {
  id                   String        @id @default(uuid())
  accessPermissionName String        @unique
  slug                 String        @unique
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  enabled              Boolean       @default(true)
  roleWithPermission   admin_roles[] @relation("admin_permissionsToadmin_roles")
}

model specialization{
  id                    String  @id @default(uuid())
  specializationName    String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  enabled               Boolean @default(true)
  companies  writer_company_user[]

}

model department{
  id                    String @id @default(uuid())
  departmentName        String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  enabled              Boolean       @default(true)
  writer_users          writer_user[]
}


model job_details {
  id               String       @id @default(uuid())
  clientID         String
  adminID          String
  salesAdminID     String?
  writerID         String?
  jobTitle         String
  jobDescription   String?
  jobDeadline      DateTime
  finalQuotationID String?
  jobAmount        Float
  jobTaxAmount     Float
  jobFinalAmount   Float
  completionDate   DateTime?
  completionStatus String     @default("Pending")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  enabled          Boolean    @default(true)
  jobFiles        job_files[]
  quotationDetails quotation_details[]
  jobCommunications job_communications[]

  // Relations
  client           client_user      @relation(fields: [clientID], references: [id])
  admin            admin_user       @relation(fields: [adminID], references: [id])
  writer            writer_user? @relation(fields: [writerID], references: [id])
  // finalQuotation    quotation_details? @relation(fields: [finalQuotationID], references: [id])

}

model job_files {
  id              String    @id @default(uuid())
  jobDetailsID    String
  fileName        String
  fileDescription String?
  fileUploadLink  String
  uploadedBy      String    // You can replace this with a relation to a user model if applicable
  uploadedAt      DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  enabled         Boolean   @default(true)

//relations
  jobDetails      job_details @relation(fields: [jobDetailsID], references: [id])

}

model quotation_details {
  id              String    @id @default(uuid())
  writerID        String    
  jobDetailsID    String
  durationDetails String
  quotationAmount Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  enabled         Boolean   @default(true)
//relations
  jobDetails      job_details @relation(fields: [jobDetailsID], references: [id])
  writer          writer_user @relation(fields: [writerID], references: [id])
}

model job_communications {
  id                    String   @id @default(uuid())
  jobDetailsID          String
  communicationSender   String   
  communicationMessage  String
  anonymityStatus       Boolean  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  enabled               Boolean  @default(true)

  // Relation to jobDetails
  jobDetails            job_details @relation(fields: [jobDetailsID], references: [id])


}
